
# считывание матрицы из файла
with open('in.txt') as f:
    matrix = [list(map(int, row.split())) for row in f.readlines()]

# алгоритм Краскала
def kruskal(Ans=0):
    N = len(matrix)                      # N - кол-во вершин, берется из матрицы
    Edges = []                           # объявление списка ребер Edges
    for i in range(1, N):                # перебираю вершины, в диапазоне от 1 до N по строкам
        for j in range(i, N):            # и по столбцам
            weight = matrix[i][j]        # присваиваю весу значение из матрицы
            if i != j and weight == 0:   # нулевой вес для отличных друг от друга не смежных вершин обозначается нулевым весом
                continue                 # пропустить итерацию если (у элемента матрицы не одинаковый индекс по столбцу и строке) И (вес = 0)
            Edges.append([weight, i, j]) # иначе добавить ребро в список ребер 
    M = len(Edges)                       # М - кол-во ребер, присваиваю из списка ребер (нашего остова) 
    Edges.sort()		         # СОРТРИРОВКА РЁБЕР  
    Comp = list(range(N))	         # Comp - это компонента связности
    for weight, start, end in Edges:     # для каждого ребра в списке ребер Edges
        if Comp[start] != Comp[end]:	 # если начальная и конечная компоненты связности !=         КАК ПОНЯТЬ ?
            Ans += weight		 # инкремент весов (хранит общее кол-во весов)			 
            a = Comp[start]		 # a - это начальная вершина			
            b = Comp[end]		 # b - это конечная вершина			
            for i in range(N): 		 # перебираю вершины, в диапозоне от 1 до N
                if Comp[i] == b:	 # если компонента связности - это конечная вершина          ЧТО ЗА		
                    Comp[i] = a          # присваиваю компоненте связности начальную вершину         ХРЕНЬ ?
    return Ans


Ans = kruskal()
print('Вес: ', Ans)        
